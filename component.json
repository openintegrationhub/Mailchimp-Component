{
    "title": "Mailchimp Marketing API",
    "docsUrl": "https://mailchimp.com/developer/marketing/",
    "url": "https://api.mailchimp.com/schema/3.0/Swagger.json?expand",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://server.api.mailchimp.com/3.0",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_username": {
                "label": "Username (basicAuth)",
                "viewClass": "TextFieldView"
            },
            "auth_password": {
                "label": "Password (basicAuth)",
                "viewClass": "TextFieldView"
            }
        }
    },
    "triggers": {
        "lookup": {
            "main": "./lib/lookups/lookup.js",
            "title": "Function to run a lookup",
            "description": "Function to call an internal trigger or action"
        },
        "getActivityFeedChimpChatter": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get latest chimp chatter",
            "description": "Return the Chimp Chatter for this account ordered by most recent.",
            "callParams": {
                "pathName": "/activity-feed/chimp-chatter",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getActivityFeedChimpChatter.in.json",
                "out": "./lib/schemas/getActivityFeedChimpChatter.out.json"
            }
        },
        "getAccountExports": {
            "main": "./lib/triggers/trigger.js",
            "title": "List account exports",
            "description": "Get a list of account exports for a given account.",
            "callParams": {
                "pathName": "/account-exports",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAccountExports.in.json",
                "out": "./lib/schemas/getAccountExports.out.json"
            }
        },
        "getAutomationsIdEmails": {
            "main": "./lib/triggers/trigger.js",
            "title": "List automated emails",
            "description": "Get a summary of the emails in a classic automation workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdEmails.in.json",
                "out": "./lib/schemas/getAutomationsIdEmails.out.json"
            }
        },
        "getAutomationsIdEmailsIdQueue": {
            "main": "./lib/triggers/trigger.js",
            "title": "List automated email subscribers",
            "description": "Get information about a classic automation email queue.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}/queue",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdEmailsIdQueue.in.json",
                "out": "./lib/schemas/getAutomationsIdEmailsIdQueue.out.json"
            }
        },
        "getAutomationsIdRemovedSubscribers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List subscribers removed from workflow",
            "description": "Get information about subscribers who were removed from a classic automation workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/removed-subscribers",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdRemovedSubscribers.in.json",
                "out": "./lib/schemas/getAutomationsIdRemovedSubscribers.out.json"
            }
        },
        "getBatches": {
            "main": "./lib/triggers/trigger.js",
            "title": "List batch requests",
            "description": "Get a summary of batch requests that have been made.",
            "callParams": {
                "pathName": "/batches",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getBatches.in.json",
                "out": "./lib/schemas/getBatches.out.json"
            }
        },
        "getBatchWebhooks": {
            "main": "./lib/triggers/trigger.js",
            "title": "List batch webhooks",
            "description": "Get all webhooks that have been configured for batches.",
            "callParams": {
                "pathName": "/batch-webhooks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getBatchWebhooks.in.json",
                "out": "./lib/schemas/getBatchWebhooks.out.json"
            }
        },
        "getTemplateFolders": {
            "main": "./lib/triggers/trigger.js",
            "title": "List template folders",
            "description": "Get all folders used to organize templates.",
            "callParams": {
                "pathName": "/template-folders",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTemplateFolders.in.json",
                "out": "./lib/schemas/getTemplateFolders.out.json"
            }
        },
        "getCampaignFolders": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign folders",
            "description": "Get all folders used to organize campaigns.",
            "callParams": {
                "pathName": "/campaign-folders",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignFolders.in.json",
                "out": "./lib/schemas/getCampaignFolders.out.json"
            }
        },
        "getCampaigns": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaigns",
            "description": "Get all campaigns in an account.",
            "callParams": {
                "pathName": "/campaigns",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaigns.in.json",
                "out": "./lib/schemas/getCampaigns.out.json"
            }
        },
        "getCampaignsIdContent": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get campaign content",
            "description": "Get the the HTML and plain-text content for a campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/content",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignsIdContent.in.json",
                "out": "./lib/schemas/getCampaignsIdContent.out.json"
            }
        },
        "getCampaignsIdSendChecklist": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get campaign send checklist",
            "description": "Review the send checklist for a campaign, and resolve any issues before sending.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/send-checklist",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignsIdSendChecklist.in.json",
                "out": "./lib/schemas/getCampaignsIdSendChecklist.out.json"
            }
        },
        "getCampaignsIdFeedback": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign feedback",
            "description": "Get team feedback while you're working together on a Mailchimp campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/feedback",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignsIdFeedback.in.json",
                "out": "./lib/schemas/getCampaignsIdFeedback.out.json"
            }
        },
        "getConnectedSites": {
            "main": "./lib/triggers/trigger.js",
            "title": "List connected sites",
            "description": "Get all connected sites in an account.",
            "callParams": {
                "pathName": "/connected-sites",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConnectedSites.in.json",
                "out": "./lib/schemas/getConnectedSites.out.json"
            }
        },
        "getFileManagerFiles": {
            "main": "./lib/triggers/trigger.js",
            "title": "List stored files",
            "description": "Get a list of available images and files stored in the File Manager for the account.",
            "callParams": {
                "pathName": "/file-manager/files",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFileManagerFiles.in.json",
                "out": "./lib/schemas/getFileManagerFiles.out.json"
            }
        },
        "getFileManagerFolders": {
            "main": "./lib/triggers/trigger.js",
            "title": "List folders",
            "description": "Get a list of all folders in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/folders",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFileManagerFolders.in.json",
                "out": "./lib/schemas/getFileManagerFolders.out.json"
            }
        },
        "getConversationsIdMessages": {
            "main": "./lib/triggers/trigger.js",
            "title": "List messages",
            "description": "Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren't available using this endpoint.",
            "callParams": {
                "pathName": "/conversations/{conversation_id}/messages",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConversationsIdMessages.in.json",
                "out": "./lib/schemas/getConversationsIdMessages.out.json"
            }
        },
        "getRoot": {
            "main": "./lib/triggers/trigger.js",
            "title": "List api root resources",
            "description": "Get links to all other resources available in the API.",
            "callParams": {
                "pathName": "/",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getRoot.in.json",
                "out": "./lib/schemas/getRoot.out.json"
            }
        },
        "getConversations": {
            "main": "./lib/triggers/trigger.js",
            "title": "List conversations",
            "description": "Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren't available using this endpoint.",
            "callParams": {
                "pathName": "/conversations",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConversations.in.json",
                "out": "./lib/schemas/getConversations.out.json"
            }
        },
        "getAuthorizedApps": {
            "main": "./lib/triggers/trigger.js",
            "title": "List authorized apps",
            "description": "Get a list of an account's registered, connected applications.",
            "callParams": {
                "pathName": "/authorized-apps",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAuthorizedApps.in.json",
                "out": "./lib/schemas/getAuthorizedApps.out.json"
            }
        },
        "getListsIdClients": {
            "main": "./lib/triggers/trigger.js",
            "title": "List top email clients",
            "description": "Get a list of the top email clients based on user-agent strings.",
            "callParams": {
                "pathName": "/lists/{list_id}/clients",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdClients.in.json",
                "out": "./lib/schemas/getListsIdClients.out.json"
            }
        },
        "getListsIdActivity": {
            "main": "./lib/triggers/trigger.js",
            "title": "List recent activity",
            "description": "Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.",
            "callParams": {
                "pathName": "/lists/{list_id}/activity",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdActivity.in.json",
                "out": "./lib/schemas/getListsIdActivity.out.json"
            }
        },
        "getListsIdAbuseReports": {
            "main": "./lib/triggers/trigger.js",
            "title": "List abuse reports",
            "description": "Get all abuse reports for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/abuse-reports",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdAbuseReports.in.json",
                "out": "./lib/schemas/getListsIdAbuseReports.out.json"
            }
        },
        "getListsIdInterestCategories": {
            "main": "./lib/triggers/trigger.js",
            "title": "List interest categories",
            "description": "Get information about a list's interest categories.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdInterestCategories.in.json",
                "out": "./lib/schemas/getListsIdInterestCategories.out.json"
            }
        },
        "getListsIdGrowthHistory": {
            "main": "./lib/triggers/trigger.js",
            "title": "List growth history data",
            "description": "Get a month-by-month summary of a specific list's growth activity.",
            "callParams": {
                "pathName": "/lists/{list_id}/growth-history",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdGrowthHistory.in.json",
                "out": "./lib/schemas/getListsIdGrowthHistory.out.json"
            }
        },
        "getListsIdInterestCategoriesIdInterests": {
            "main": "./lib/triggers/trigger.js",
            "title": "List interests in category",
            "description": "Get a list of this category's interests.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}/interests",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdInterestCategoriesIdInterests.in.json",
                "out": "./lib/schemas/getListsIdInterestCategoriesIdInterests.out.json"
            }
        },
        "searchTagsByName": {
            "main": "./lib/triggers/trigger.js",
            "title": "Search for tags on a list by name.",
            "description": "Search for tags on a list by name. If no name is provided, will return all tags on the list.",
            "callParams": {
                "pathName": "/lists/{list_id}/tag-search",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/searchTagsByName.in.json",
                "out": "./lib/schemas/searchTagsByName.out.json"
            }
        },
        "getListsIdSegmentsIdMembers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List members in segment",
            "description": "Get information about members in a saved segment.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}/members",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdSegmentsIdMembers.in.json",
                "out": "./lib/schemas/getListsIdSegmentsIdMembers.out.json"
            }
        },
        "getListsIdMembers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List members info",
            "description": "Get information about members in a specific Mailchimp list.",
            "callParams": {
                "pathName": "/lists/{list_id}/members",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembers.in.json",
                "out": "./lib/schemas/getListsIdMembers.out.json"
            }
        },
        "getLists": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get lists info",
            "description": "Get information about all lists in the account.",
            "callParams": {
                "pathName": "/lists",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getLists.in.json",
                "out": "./lib/schemas/getLists.out.json"
            }
        },
        "getListsIdMembersIdActivity": {
            "main": "./lib/triggers/trigger.js",
            "title": "View recent activity 50",
            "description": "Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/activity",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdActivity.in.json",
                "out": "./lib/schemas/getListsIdMembersIdActivity.out.json"
            }
        },
        "getListsIdMembersIdEvents": {
            "main": "./lib/triggers/trigger.js",
            "title": "List member events",
            "description": "Get events for a contact.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/events",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdEvents.in.json",
                "out": "./lib/schemas/getListsIdMembersIdEvents.out.json"
            }
        },
        "getListsIdMembersIdActivityFeed": {
            "main": "./lib/triggers/trigger.js",
            "title": "View recent activity",
            "description": "Get a member's activity on a specific list, including opens, clicks, and unsubscribes.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/activity-feed",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdActivityFeed.in.json",
                "out": "./lib/schemas/getListsIdMembersIdActivityFeed.out.json"
            }
        },
        "getListMemberTags": {
            "main": "./lib/triggers/trigger.js",
            "title": "List member tags",
            "description": "Get the tags on a list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/tags",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListMemberTags.in.json",
                "out": "./lib/schemas/getListMemberTags.out.json"
            }
        },
        "getListsIdMembersIdGoals": {
            "main": "./lib/triggers/trigger.js",
            "title": "List member goal events",
            "description": "Get the last 50 Goal events for a member on a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/goals",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdGoals.in.json",
                "out": "./lib/schemas/getListsIdMembersIdGoals.out.json"
            }
        },
        "getListsIdWebhooks": {
            "main": "./lib/triggers/trigger.js",
            "title": "List webhooks",
            "description": "Get information about all webhooks for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/webhooks",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdWebhooks.in.json",
                "out": "./lib/schemas/getListsIdWebhooks.out.json"
            }
        },
        "getListsIdLocations": {
            "main": "./lib/triggers/trigger.js",
            "title": "List locations",
            "description": "Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.",
            "callParams": {
                "pathName": "/lists/{list_id}/locations",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdLocations.in.json",
                "out": "./lib/schemas/getListsIdLocations.out.json"
            }
        },
        "getListsIdSignupForms": {
            "main": "./lib/triggers/trigger.js",
            "title": "List signup forms",
            "description": "Get signup forms for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/signup-forms",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdSignupForms.in.json",
                "out": "./lib/schemas/getListsIdSignupForms.out.json"
            }
        },
        "getListsIdSurveys": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get information about all surveys for a list",
            "description": "Get information about all available surveys for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/surveys",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdSurveys.in.json",
                "out": "./lib/schemas/getListsIdSurveys.out.json"
            }
        },
        "getListsIdMembersIdNotes": {
            "main": "./lib/triggers/trigger.js",
            "title": "List recent member notes",
            "description": "Get recent notes for a specific list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/notes",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdNotes.in.json",
                "out": "./lib/schemas/getListsIdMembersIdNotes.out.json"
            }
        },
        "getLandingPageIdContent": {
            "main": "./lib/triggers/trigger.js",
            "title": "Get landing page content",
            "description": "Get the the HTML for your landing page.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}/content",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getLandingPageIdContent.in.json",
                "out": "./lib/schemas/getLandingPageIdContent.out.json"
            }
        },
        "getAllLandingPages": {
            "main": "./lib/triggers/trigger.js",
            "title": "List landing pages",
            "description": "Get all landing pages.",
            "callParams": {
                "pathName": "/landing-pages",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAllLandingPages.in.json",
                "out": "./lib/schemas/getAllLandingPages.out.json"
            }
        },
        "getReportsIdAdvice": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign feedback",
            "description": "Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/advice",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdAdvice.in.json",
                "out": "./lib/schemas/getReportsIdAdvice.out.json"
            }
        },
        "getReportsIdClickDetails": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign details",
            "description": "Get information about clicks on specific links in your Mailchimp campaigns.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/click-details",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdClickDetails.in.json",
                "out": "./lib/schemas/getReportsIdClickDetails.out.json"
            }
        },
        "getListsIdMergeFields": {
            "main": "./lib/triggers/trigger.js",
            "title": "List merge fields",
            "description": "Get a list of all merge fields for an audience.",
            "callParams": {
                "pathName": "/lists/{list_id}/merge-fields",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMergeFields.in.json",
                "out": "./lib/schemas/getListsIdMergeFields.out.json"
            }
        },
        "getReportsIdOpenDetails": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign open details",
            "description": "Get detailed information about any campaign emails that were opened by a list member.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/open-details",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdOpenDetails.in.json",
                "out": "./lib/schemas/getReportsIdOpenDetails.out.json"
            }
        },
        "getReportsIdClickDetailsIdMembers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List clicked link subscribers",
            "description": "Get information about list members who clicked on a specific link in a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/click-details/{link_id}/members",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdClickDetailsIdMembers.in.json",
                "out": "./lib/schemas/getReportsIdClickDetailsIdMembers.out.json"
            }
        },
        "getReports": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign reports",
            "description": "Get campaign reports.",
            "callParams": {
                "pathName": "/reports",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReports.in.json",
                "out": "./lib/schemas/getReports.out.json"
            }
        },
        "getReportsIdDomainPerformance": {
            "main": "./lib/triggers/trigger.js",
            "title": "List domain performance stats",
            "description": "Get statistics for the top-performing email domains in a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/domain-performance",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdDomainPerformance.in.json",
                "out": "./lib/schemas/getReportsIdDomainPerformance.out.json"
            }
        },
        "getReportsIdSentTo": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign recipients",
            "description": "Get information about campaign recipients.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/sent-to",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdSentTo.in.json",
                "out": "./lib/schemas/getReportsIdSentTo.out.json"
            }
        },
        "getReportsIdEmailActivity": {
            "main": "./lib/triggers/trigger.js",
            "title": "List email activity",
            "description": "Get a list of member's subscriber activity in a specific campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/email-activity",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdEmailActivity.in.json",
                "out": "./lib/schemas/getReportsIdEmailActivity.out.json"
            }
        },
        "getReportsIdUnsubscribed": {
            "main": "./lib/triggers/trigger.js",
            "title": "List unsubscribed members",
            "description": "Get information about members who have unsubscribed from a specific campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/unsubscribed",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdUnsubscribed.in.json",
                "out": "./lib/schemas/getReportsIdUnsubscribed.out.json"
            }
        },
        "getReportsIdEepurl": {
            "main": "./lib/triggers/trigger.js",
            "title": "List EepURL activity",
            "description": "Get a summary of social activity for the campaign, tracked by EepURL.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/eepurl",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdEepurl.in.json",
                "out": "./lib/schemas/getReportsIdEepurl.out.json"
            }
        },
        "getReportsIdLocations": {
            "main": "./lib/triggers/trigger.js",
            "title": "List top open activities",
            "description": "Get top open locations for a specific campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/locations",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdLocations.in.json",
                "out": "./lib/schemas/getReportsIdLocations.out.json"
            }
        },
        "getTemplates": {
            "main": "./lib/triggers/trigger.js",
            "title": "List templates",
            "description": "Get a list of an account's available templates.",
            "callParams": {
                "pathName": "/templates",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTemplates.in.json",
                "out": "./lib/schemas/getTemplates.out.json"
            }
        },
        "getReportsIdEcommerceProductActivity": {
            "main": "./lib/triggers/trigger.js",
            "title": "List campaign product activity",
            "description": "Get breakdown of product activity for a campaign",
            "callParams": {
                "pathName": "/reports/{campaign_id}/ecommerce-product-activity",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdEcommerceProductActivity.in.json",
                "out": "./lib/schemas/getReportsIdEcommerceProductActivity.out.json"
            }
        },
        "getEcommerceStores": {
            "main": "./lib/triggers/trigger.js",
            "title": "List stores",
            "description": "Get information about all stores in the account.",
            "callParams": {
                "pathName": "/ecommerce/stores",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStores.in.json",
                "out": "./lib/schemas/getEcommerceStores.out.json"
            }
        },
        "getTemplatesIdDefaultContent": {
            "main": "./lib/triggers/trigger.js",
            "title": "View default content",
            "description": "Get the sections that you can edit in a template, including each section's default content.",
            "callParams": {
                "pathName": "/templates/{template_id}/default-content",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTemplatesIdDefaultContent.in.json",
                "out": "./lib/schemas/getTemplatesIdDefaultContent.out.json"
            }
        },
        "getReportsIdSubReportsId": {
            "main": "./lib/triggers/trigger.js",
            "title": "List child campaign reports",
            "description": "Get a list of reports with child campaigns for a specific parent campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/sub-reports",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdSubReportsId.in.json",
                "out": "./lib/schemas/getReportsIdSubReportsId.out.json"
            }
        },
        "getEcommerceStoresIdCarts": {
            "main": "./lib/triggers/trigger.js",
            "title": "List carts",
            "description": "Get information about a store's carts.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCarts.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCarts.out.json"
            }
        },
        "getEcommerceOrders": {
            "main": "./lib/triggers/trigger.js",
            "title": "List account orders",
            "description": "Get information about an account's orders.",
            "callParams": {
                "pathName": "/ecommerce/orders",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceOrders.in.json",
                "out": "./lib/schemas/getEcommerceOrders.out.json"
            }
        },
        "getEcommerceStoresIdCartsIdLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "List cart line items",
            "description": "Get information about a cart's line items.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}/lines",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCartsIdLines.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCartsIdLines.out.json"
            }
        },
        "getEcommerceStoresIdCustomers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List customers",
            "description": "Get information about a store's customers.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCustomers.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCustomers.out.json"
            }
        },
        "getEcommerceStoresIdPromocodes": {
            "main": "./lib/triggers/trigger.js",
            "title": "List promo codes",
            "description": "Get information about a store's promo codes.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdPromocodes.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdPromocodes.out.json"
            }
        },
        "getEcommerceStoresIdPromorules": {
            "main": "./lib/triggers/trigger.js",
            "title": "List promo rules",
            "description": "Get information about a store's promo rules.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdPromorules.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdPromorules.out.json"
            }
        },
        "getEcommerceStoresIdOrders": {
            "main": "./lib/triggers/trigger.js",
            "title": "List orders",
            "description": "Get information about a store's orders.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdOrders.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdOrders.out.json"
            }
        },
        "getEcommerceStoresIdProducts": {
            "main": "./lib/triggers/trigger.js",
            "title": "List product",
            "description": "Get information about a store's products.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProducts.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProducts.out.json"
            }
        },
        "getEcommerceStoresIdOrdersIdLines": {
            "main": "./lib/triggers/trigger.js",
            "title": "List order line items",
            "description": "Get information about an order's line items.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}/lines",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdOrdersIdLines.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdOrdersIdLines.out.json"
            }
        },
        "getEcommerceStoresIdProductsIdVariants": {
            "main": "./lib/triggers/trigger.js",
            "title": "List product variants",
            "description": "Get information about a product's variants.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProductsIdVariants.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProductsIdVariants.out.json"
            }
        },
        "getPing": {
            "main": "./lib/triggers/trigger.js",
            "title": "Ping",
            "description": "A health check for the API that won't return any account-specific information.",
            "callParams": {
                "pathName": "/ping",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getPing.in.json",
                "out": "./lib/schemas/getPing.out.json"
            }
        },
        "getEcommerceStoresIdProductsIdImages": {
            "main": "./lib/triggers/trigger.js",
            "title": "List product images",
            "description": "Get information about a product's images.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/images",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProductsIdImages.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProductsIdImages.out.json"
            }
        },
        "previewASegment": {
            "main": "./lib/triggers/trigger.js",
            "title": "List segments",
            "description": "Get information about all available segments for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/previewASegment.in.json",
                "out": "./lib/schemas/previewASegment.out.json"
            }
        },
        "getSearchCampaigns": {
            "main": "./lib/triggers/trigger.js",
            "title": "Search campaigns",
            "description": "Search all campaigns for the specified query terms.",
            "callParams": {
                "pathName": "/search-campaigns",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSearchCampaigns.in.json",
                "out": "./lib/schemas/getSearchCampaigns.out.json"
            }
        },
        "getSearchMembers": {
            "main": "./lib/triggers/trigger.js",
            "title": "Search members",
            "description": "Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.",
            "callParams": {
                "pathName": "/search-members",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getSearchMembers.in.json",
                "out": "./lib/schemas/getSearchMembers.out.json"
            }
        },
        "getAllFacebookAds": {
            "main": "./lib/triggers/trigger.js",
            "title": "List facebook ads",
            "description": "Get list of Facebook ads.",
            "callParams": {
                "pathName": "/facebook-ads",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAllFacebookAds.in.json",
                "out": "./lib/schemas/getAllFacebookAds.out.json"
            }
        },
        "getAutomations": {
            "main": "./lib/triggers/trigger.js",
            "title": "List automations",
            "description": "Get a summary of an account's classic automations.",
            "callParams": {
                "pathName": "/automations",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomations.in.json",
                "out": "./lib/schemas/getAutomations.out.json"
            }
        },
        "getReportingFacebookAdsIdEcommerceProductActivity": {
            "main": "./lib/triggers/trigger.js",
            "title": "List facebook ecommerce report",
            "description": "Get breakdown of product activity for an outreach.",
            "callParams": {
                "pathName": "/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingFacebookAdsIdEcommerceProductActivity.in.json",
                "out": "./lib/schemas/getReportingFacebookAdsIdEcommerceProductActivity.out.json"
            }
        },
        "getReportingSurveys": {
            "main": "./lib/triggers/trigger.js",
            "title": "List survey reports",
            "description": "Get reports for surveys.",
            "callParams": {
                "pathName": "/reporting/surveys",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveys.in.json",
                "out": "./lib/schemas/getReportingSurveys.out.json"
            }
        },
        "getReportingSurveysIdQuestionsIdAnswers": {
            "main": "./lib/triggers/trigger.js",
            "title": "List answers for question",
            "description": "Get answers for a survey question.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}/questions/{question_id}/answers",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysIdQuestionsIdAnswers.in.json",
                "out": "./lib/schemas/getReportingSurveysIdQuestionsIdAnswers.out.json"
            }
        },
        "getReportingLandingPages": {
            "main": "./lib/triggers/trigger.js",
            "title": "List landing pages reports",
            "description": "Get reports of landing pages.",
            "callParams": {
                "pathName": "/reporting/landing-pages",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingLandingPages.in.json",
                "out": "./lib/schemas/getReportingLandingPages.out.json"
            }
        },
        "getReportingSurveysIdResponses": {
            "main": "./lib/triggers/trigger.js",
            "title": "List survey responses",
            "description": "Get responses to a survey.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}/responses",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysIdResponses.in.json",
                "out": "./lib/schemas/getReportingSurveysIdResponses.out.json"
            }
        },
        "getVerifiedDomains": {
            "main": "./lib/triggers/trigger.js",
            "title": "List sending domains",
            "description": "Get all of the sending domains on the account.",
            "callParams": {
                "pathName": "/verified-domains",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getVerifiedDomains.in.json",
                "out": "./lib/schemas/getVerifiedDomains.out.json"
            }
        },
        "getReportingSurveysIdQuestions": {
            "main": "./lib/triggers/trigger.js",
            "title": "List survey question reports",
            "description": "Get reports for survey questions.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}/questions",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysIdQuestions.in.json",
                "out": "./lib/schemas/getReportingSurveysIdQuestions.out.json"
            }
        },
        "getReportingFacebookAds": {
            "main": "./lib/triggers/trigger.js",
            "title": "List facebook ads reports",
            "description": "Get reports of Facebook ads.",
            "callParams": {
                "pathName": "/reporting/facebook-ads",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingFacebookAds.in.json",
                "out": "./lib/schemas/getReportingFacebookAds.out.json"
            }
        },
        "getReportsIdAbuseReportsId": {
            "main": "./lib/triggers/trigger.js",
            "title": "List abuse reports",
            "description": "Get a list of abuse complaints for a specific campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/abuse-reports",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdAbuseReportsId.in.json",
                "out": "./lib/schemas/getReportsIdAbuseReportsId.out.json"
            }
        }
    },
    "actions": {
        "postAutomationsIdActionsPauseAllEmails": {
            "main": "./lib/actions/action.js",
            "title": "Pause automation emails",
            "description": "Pause all emails in a specific classic automation workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/actions/pause-all-emails",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdActionsPauseAllEmails.in.json",
                "out": "./lib/schemas/postAutomationsIdActionsPauseAllEmails.out.json"
            }
        },
        "archiveAutomations": {
            "main": "./lib/actions/action.js",
            "title": "Archive automation",
            "description": "Archiving will permanently end your automation and keep the report data. You'll be able to replicate your archived automation, but you can't restart it.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/actions/archive",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/archiveAutomations.in.json",
                "out": "./lib/schemas/archiveAutomations.out.json"
            }
        },
        "postAutomationsIdActionsStartAllEmails": {
            "main": "./lib/actions/action.js",
            "title": "Start automation emails",
            "description": "Start all emails in a classic automation workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/actions/start-all-emails",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdActionsStartAllEmails.in.json",
                "out": "./lib/schemas/postAutomationsIdActionsStartAllEmails.out.json"
            }
        },
        "getAutomationsId": {
            "main": "./lib/actions/action.js",
            "title": "Get automation info",
            "description": "Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsId.in.json",
                "out": "./lib/schemas/getAutomationsId.out.json"
            }
        },
        "patchAutomationEmailWorkflowId": {
            "main": "./lib/actions/action.js",
            "title": "Update workflow email",
            "description": "Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchAutomationEmailWorkflowId.in.json",
                "out": "./lib/schemas/patchAutomationEmailWorkflowId.out.json"
            }
        },
        "getAutomationsIdEmailsId": {
            "main": "./lib/actions/action.js",
            "title": "Get workflow email info",
            "description": "Get information about an individual classic automation workflow email.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdEmailsId.in.json",
                "out": "./lib/schemas/getAutomationsIdEmailsId.out.json"
            }
        },
        "getAutomationsIdEmailsIdQueueId": {
            "main": "./lib/actions/action.js",
            "title": "Get automated email subscriber",
            "description": "Get information about a specific subscriber in a classic automation email queue.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdEmailsIdQueueId.in.json",
                "out": "./lib/schemas/getAutomationsIdEmailsIdQueueId.out.json"
            }
        },
        "postAutomationsIdEmailsIdQueue": {
            "main": "./lib/actions/action.js",
            "title": "Add subscriber to workflow email",
            "description": "Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}/queue",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdEmailsIdQueue.in.json",
                "out": "./lib/schemas/postAutomationsIdEmailsIdQueue.out.json"
            }
        },
        "postAutomationsIdEmailsIdActionsStart": {
            "main": "./lib/actions/action.js",
            "title": "Start automated email",
            "description": "Start an automated email.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}/actions/start",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdEmailsIdActionsStart.in.json",
                "out": "./lib/schemas/postAutomationsIdEmailsIdActionsStart.out.json"
            }
        },
        "postAccountExport": {
            "main": "./lib/actions/action.js",
            "title": "Add export",
            "description": "Create a new account export in your Mailchimp account.",
            "callParams": {
                "pathName": "/account-exports",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postAccountExport.in.json",
                "out": "./lib/schemas/postAccountExport.out.json"
            }
        },
        "postAutomationsIdRemovedSubscribers": {
            "main": "./lib/actions/action.js",
            "title": "Remove subscriber from workflow",
            "description": "Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/removed-subscribers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdRemovedSubscribers.in.json",
                "out": "./lib/schemas/postAutomationsIdRemovedSubscribers.out.json"
            }
        },
        "postAutomationsIdEmailsIdActionsPause": {
            "main": "./lib/actions/action.js",
            "title": "Pause automated email",
            "description": "Pause an automated email.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomationsIdEmailsIdActionsPause.in.json",
                "out": "./lib/schemas/postAutomationsIdEmailsIdActionsPause.out.json"
            }
        },
        "getBatchesId": {
            "main": "./lib/actions/action.js",
            "title": "Get batch operation status",
            "description": "Get the status of a batch request.",
            "callParams": {
                "pathName": "/batches/{batch_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getBatchesId.in.json",
                "out": "./lib/schemas/getBatchesId.out.json"
            }
        },
        "getBatchWebhook": {
            "main": "./lib/actions/action.js",
            "title": "Get batch webhook info",
            "description": "Get information about a specific batch webhook.",
            "callParams": {
                "pathName": "/batch-webhooks/{batch_webhook_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getBatchWebhook.in.json",
                "out": "./lib/schemas/getBatchWebhook.out.json"
            }
        },
        "getAutomationsIdRemovedSubscribersId": {
            "main": "./lib/actions/action.js",
            "title": "Get subscriber removed from workflow",
            "description": "Get information about a specific subscriber who was removed from a classic automation workflow.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/removed-subscribers/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAutomationsIdRemovedSubscribersId.in.json",
                "out": "./lib/schemas/getAutomationsIdRemovedSubscribersId.out.json"
            }
        },
        "postBatchWebhooks": {
            "main": "./lib/actions/action.js",
            "title": "Add batch webhook",
            "description": "Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.",
            "callParams": {
                "pathName": "/batch-webhooks",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postBatchWebhooks.in.json",
                "out": "./lib/schemas/postBatchWebhooks.out.json"
            }
        },
        "patchBatchWebhooks": {
            "main": "./lib/actions/action.js",
            "title": "Update batch webhook",
            "description": "Update a webhook that will fire whenever any batch request completes processing.",
            "callParams": {
                "pathName": "/batch-webhooks/{batch_webhook_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchBatchWebhooks.in.json",
                "out": "./lib/schemas/patchBatchWebhooks.out.json"
            }
        },
        "postTemplateFolders": {
            "main": "./lib/actions/action.js",
            "title": "Add template folder",
            "description": "Create a new template folder.",
            "callParams": {
                "pathName": "/template-folders",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postTemplateFolders.in.json",
                "out": "./lib/schemas/postTemplateFolders.out.json"
            }
        },
        "deleteBatchesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete batch request",
            "description": "Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.",
            "callParams": {
                "pathName": "/batches/{batch_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteBatchesId.in.json",
                "out": "./lib/schemas/deleteBatchesId.out.json"
            }
        },
        "deleteTemplateFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Delete template folder",
            "description": "Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.",
            "callParams": {
                "pathName": "/template-folders/{folder_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteTemplateFoldersId.in.json",
                "out": "./lib/schemas/deleteTemplateFoldersId.out.json"
            }
        },
        "deleteBatchWebhookId": {
            "main": "./lib/actions/action.js",
            "title": "Delete batch webhook",
            "description": "Remove a batch webhook. Webhooks will no longer be sent to the given URL.",
            "callParams": {
                "pathName": "/batch-webhooks/{batch_webhook_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteBatchWebhookId.in.json",
                "out": "./lib/schemas/deleteBatchWebhookId.out.json"
            }
        },
        "postCampaignFolders": {
            "main": "./lib/actions/action.js",
            "title": "Add campaign folder",
            "description": "Create a new campaign folder.",
            "callParams": {
                "pathName": "/campaign-folders",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignFolders.in.json",
                "out": "./lib/schemas/postCampaignFolders.out.json"
            }
        },
        "patchCampaignFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Update campaign folder",
            "description": "Update a specific folder used to organize campaigns.",
            "callParams": {
                "pathName": "/campaign-folders/{folder_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchCampaignFoldersId.in.json",
                "out": "./lib/schemas/patchCampaignFoldersId.out.json"
            }
        },
        "deleteCampaignFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Delete campaign folder",
            "description": "Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.",
            "callParams": {
                "pathName": "/campaign-folders/{folder_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteCampaignFoldersId.in.json",
                "out": "./lib/schemas/deleteCampaignFoldersId.out.json"
            }
        },
        "getCampaignFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign folder",
            "description": "Get information about a specific folder used to organize campaigns.",
            "callParams": {
                "pathName": "/campaign-folders/{folder_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignFoldersId.in.json",
                "out": "./lib/schemas/getCampaignFoldersId.out.json"
            }
        },
        "deleteCampaignsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete campaign",
            "description": "Remove a campaign from your Mailchimp account.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteCampaignsId.in.json",
                "out": "./lib/schemas/deleteCampaignsId.out.json"
            }
        },
        "deleteAutomationsIdEmailsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete workflow email",
            "description": "Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.",
            "callParams": {
                "pathName": "/automations/{workflow_id}/emails/{workflow_email_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteAutomationsIdEmailsId.in.json",
                "out": "./lib/schemas/deleteAutomationsIdEmailsId.out.json"
            }
        },
        "getCampaignsId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign info",
            "description": "Get information about a specific campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignsId.in.json",
                "out": "./lib/schemas/getCampaignsId.out.json"
            }
        },
        "postCampaignsIdActionsUnschedule": {
            "main": "./lib/actions/action.js",
            "title": "Unschedule campaign",
            "description": "Unschedule a scheduled campaign that hasn't started sending.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/unschedule",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsUnschedule.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsUnschedule.out.json"
            }
        },
        "postAutomations": {
            "main": "./lib/actions/action.js",
            "title": "Add automation",
            "description": "Create a new classic automation in your Mailchimp account.",
            "callParams": {
                "pathName": "/automations",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postAutomations.in.json",
                "out": "./lib/schemas/postAutomations.out.json"
            }
        },
        "getAuthorizedAppsId": {
            "main": "./lib/actions/action.js",
            "title": "Get authorized app info",
            "description": "Get information about a specific authorized application.",
            "callParams": {
                "pathName": "/authorized-apps/{app_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAuthorizedAppsId.in.json",
                "out": "./lib/schemas/getAuthorizedAppsId.out.json"
            }
        },
        "postCampaigns": {
            "main": "./lib/actions/action.js",
            "title": "Add campaign",
            "description": "Create a new Mailchimp campaign.",
            "callParams": {
                "pathName": "/campaigns",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaigns.in.json",
                "out": "./lib/schemas/postCampaigns.out.json"
            }
        },
        "postCampaignsIdActionsReplicate": {
            "main": "./lib/actions/action.js",
            "title": "Replicate campaign",
            "description": "Replicate a campaign in saved or send status.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/replicate",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsReplicate.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsReplicate.out.json"
            }
        },
        "postCampaignsIdActionsTest": {
            "main": "./lib/actions/action.js",
            "title": "Send test email",
            "description": "Send a test email.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/test",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsTest.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsTest.out.json"
            }
        },
        "postCampaignsIdActionsSchedule": {
            "main": "./lib/actions/action.js",
            "title": "Schedule campaign",
            "description": "Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/schedule",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsSchedule.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsSchedule.out.json"
            }
        },
        "patchCampaignsIdFeedbackId": {
            "main": "./lib/actions/action.js",
            "title": "Update campaign feedback message",
            "description": "Update a specific feedback message for a campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/feedback/{feedback_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchCampaignsIdFeedbackId.in.json",
                "out": "./lib/schemas/patchCampaignsIdFeedbackId.out.json"
            }
        },
        "postCampaignsIdFeedback": {
            "main": "./lib/actions/action.js",
            "title": "Add campaign feedback",
            "description": "Add feedback on a specific campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/feedback",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdFeedback.in.json",
                "out": "./lib/schemas/postCampaignsIdFeedback.out.json"
            }
        },
        "postBatches": {
            "main": "./lib/actions/action.js",
            "title": "Start batch operation",
            "description": "Begin processing a batch operations request.",
            "callParams": {
                "pathName": "/batches",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postBatches.in.json",
                "out": "./lib/schemas/postBatches.out.json"
            }
        },
        "deleteCampaignsIdFeedbackId": {
            "main": "./lib/actions/action.js",
            "title": "Delete campaign feedback message",
            "description": "Remove a specific feedback message for a campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/feedback/{feedback_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteCampaignsIdFeedbackId.in.json",
                "out": "./lib/schemas/deleteCampaignsIdFeedbackId.out.json"
            }
        },
        "patchTemplateFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Update template folder",
            "description": "Update a specific folder used to organize templates.",
            "callParams": {
                "pathName": "/template-folders/{folder_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchTemplateFoldersId.in.json",
                "out": "./lib/schemas/patchTemplateFoldersId.out.json"
            }
        },
        "deleteConnectedSitesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete connected site",
            "description": "Remove a connected site from your Mailchimp account.",
            "callParams": {
                "pathName": "/connected-sites/{connected_site_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteConnectedSitesId.in.json",
                "out": "./lib/schemas/deleteConnectedSitesId.out.json"
            }
        },
        "postConnectedSitesIdActionsVerifyScriptInstallation": {
            "main": "./lib/actions/action.js",
            "title": "Verify connected site script",
            "description": "Verify that the connected sites script has been installed, either via the script URL or fragment.",
            "callParams": {
                "pathName": "/connected-sites/{connected_site_id}/actions/verify-script-installation",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postConnectedSitesIdActionsVerifyScriptInstallation.in.json",
                "out": "./lib/schemas/postConnectedSitesIdActionsVerifyScriptInstallation.out.json"
            }
        },
        "postCampaignsIdActionsPause": {
            "main": "./lib/actions/action.js",
            "title": "Pause rss campaign",
            "description": "Pause an RSS-Driven campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/pause",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsPause.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsPause.out.json"
            }
        },
        "putCampaignsIdContent": {
            "main": "./lib/actions/action.js",
            "title": "Set campaign content",
            "description": "Set the content for a campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/content",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/putCampaignsIdContent.in.json",
                "out": "./lib/schemas/putCampaignsIdContent.out.json"
            }
        },
        "getTemplateFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Get template folder",
            "description": "Get information about a specific folder used to organize templates.",
            "callParams": {
                "pathName": "/template-folders/{folder_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTemplateFoldersId.in.json",
                "out": "./lib/schemas/getTemplateFoldersId.out.json"
            }
        },
        "getCampaignsIdFeedbackId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign feedback message",
            "description": "Get a specific feedback message from a campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/feedback/{feedback_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getCampaignsIdFeedbackId.in.json",
                "out": "./lib/schemas/getCampaignsIdFeedbackId.out.json"
            }
        },
        "postConnectedSites": {
            "main": "./lib/actions/action.js",
            "title": "Add connected site",
            "description": "Create a new Mailchimp connected site.",
            "callParams": {
                "pathName": "/connected-sites",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postConnectedSites.in.json",
                "out": "./lib/schemas/postConnectedSites.out.json"
            }
        },
        "getConnectedSitesId": {
            "main": "./lib/actions/action.js",
            "title": "Get connected site",
            "description": "Get information about a specific connected site.",
            "callParams": {
                "pathName": "/connected-sites/{connected_site_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConnectedSitesId.in.json",
                "out": "./lib/schemas/getConnectedSitesId.out.json"
            }
        },
        "postCampaignsIdActionsResume": {
            "main": "./lib/actions/action.js",
            "title": "Resume rss campaign",
            "description": "Resume an RSS-Driven campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/resume",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsResume.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsResume.out.json"
            }
        },
        "getConversationsIdMessagesId": {
            "main": "./lib/actions/action.js",
            "title": "Get message",
            "description": "Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren't available using this endpoint.",
            "callParams": {
                "pathName": "/conversations/{conversation_id}/messages/{message_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConversationsIdMessagesId.in.json",
                "out": "./lib/schemas/getConversationsIdMessagesId.out.json"
            }
        },
        "postCustomerJourneysJourneysIdStepsIdActionsTrigger": {
            "main": "./lib/actions/action.js",
            "title": "Customer Journeys API trigger for a contact",
            "description": "A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We'll provide a url during the process that includes the {journey_id} and {step_id}. You'll then be able to use this endpoint to trigger the condition for the posted contact.",
            "callParams": {
                "pathName": "/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postCustomerJourneysJourneysIdStepsIdActionsTrigger.in.json",
                "out": "./lib/schemas/postCustomerJourneysJourneysIdStepsIdActionsTrigger.out.json"
            }
        },
        "getFileManagerFilesId": {
            "main": "./lib/actions/action.js",
            "title": "Get file",
            "description": "Get information about a specific file in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/files/{file_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFileManagerFilesId.in.json",
                "out": "./lib/schemas/getFileManagerFilesId.out.json"
            }
        },
        "getConversationsId": {
            "main": "./lib/actions/action.js",
            "title": "Get conversation",
            "description": "Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren't available using this endpoint.",
            "callParams": {
                "pathName": "/conversations/{conversation_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getConversationsId.in.json",
                "out": "./lib/schemas/getConversationsId.out.json"
            }
        },
        "postFileManagerFiles": {
            "main": "./lib/actions/action.js",
            "title": "Add file",
            "description": "Upload a new image or file to the File Manager.",
            "callParams": {
                "pathName": "/file-manager/files",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postFileManagerFiles.in.json",
                "out": "./lib/schemas/postFileManagerFiles.out.json"
            }
        },
        "deleteFileManagerFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Delete folder",
            "description": "Delete a specific folder in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/folders/{folder_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteFileManagerFoldersId.in.json",
                "out": "./lib/schemas/deleteFileManagerFoldersId.out.json"
            }
        },
        "deleteFileManagerFilesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete file",
            "description": "Remove a specific file from the File Manager.",
            "callParams": {
                "pathName": "/file-manager/files/{file_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteFileManagerFilesId.in.json",
                "out": "./lib/schemas/deleteFileManagerFilesId.out.json"
            }
        },
        "patchFileManagerFilesId": {
            "main": "./lib/actions/action.js",
            "title": "Update file",
            "description": "Update a file in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/files/{file_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchFileManagerFilesId.in.json",
                "out": "./lib/schemas/patchFileManagerFilesId.out.json"
            }
        },
        "postFileManagerFolders": {
            "main": "./lib/actions/action.js",
            "title": "Add folder",
            "description": "Create a new folder in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/folders",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postFileManagerFolders.in.json",
                "out": "./lib/schemas/postFileManagerFolders.out.json"
            }
        },
        "postLists": {
            "main": "./lib/actions/action.js",
            "title": "Add list",
            "description": "Create a new list in your Mailchimp account.",
            "callParams": {
                "pathName": "/lists",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postLists.in.json",
                "out": "./lib/schemas/postLists.out.json"
            }
        },
        "patchFileManagerFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Update folder",
            "description": "Update a specific File Manager folder.",
            "callParams": {
                "pathName": "/file-manager/folders/{folder_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchFileManagerFoldersId.in.json",
                "out": "./lib/schemas/patchFileManagerFoldersId.out.json"
            }
        },
        "patchListsId": {
            "main": "./lib/actions/action.js",
            "title": "Update lists",
            "description": "Update the settings for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsId.in.json",
                "out": "./lib/schemas/patchListsId.out.json"
            }
        },
        "getListsId": {
            "main": "./lib/actions/action.js",
            "title": "Get list info",
            "description": "Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.",
            "callParams": {
                "pathName": "/lists/{list_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsId.in.json",
                "out": "./lib/schemas/getListsId.out.json"
            }
        },
        "postListsIdInterestCategories": {
            "main": "./lib/actions/action.js",
            "title": "Add interest category",
            "description": "Create a new interest category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdInterestCategories.in.json",
                "out": "./lib/schemas/postListsIdInterestCategories.out.json"
            }
        },
        "getListsIdInterestCategoriesId": {
            "main": "./lib/actions/action.js",
            "title": "Get interest category info",
            "description": "Get information about a specific interest category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdInterestCategoriesId.in.json",
                "out": "./lib/schemas/getListsIdInterestCategoriesId.out.json"
            }
        },
        "patchListsIdInterestCategoriesId": {
            "main": "./lib/actions/action.js",
            "title": "Update interest category",
            "description": "Update a specific interest category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdInterestCategoriesId.in.json",
                "out": "./lib/schemas/patchListsIdInterestCategoriesId.out.json"
            }
        },
        "deleteListsIdInterestCategoriesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete interest category",
            "description": "Delete a specific interest category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdInterestCategoriesId.in.json",
                "out": "./lib/schemas/deleteListsIdInterestCategoriesId.out.json"
            }
        },
        "getListsIdAbuseReportsId": {
            "main": "./lib/actions/action.js",
            "title": "Get abuse report",
            "description": "Get details about a specific abuse report.",
            "callParams": {
                "pathName": "/lists/{list_id}/abuse-reports/{report_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdAbuseReportsId.in.json",
                "out": "./lib/schemas/getListsIdAbuseReportsId.out.json"
            }
        },
        "postListsIdInterestCategoriesIdInterests": {
            "main": "./lib/actions/action.js",
            "title": "Add interest in category",
            "description": "Create a new interest or 'group name' for a specific category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}/interests",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdInterestCategoriesIdInterests.in.json",
                "out": "./lib/schemas/postListsIdInterestCategoriesIdInterests.out.json"
            }
        },
        "getListsIdGrowthHistoryId": {
            "main": "./lib/actions/action.js",
            "title": "Get growth history by month",
            "description": "Get a summary of a specific list's growth activity for a specific month and year.",
            "callParams": {
                "pathName": "/lists/{list_id}/growth-history/{month}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdGrowthHistoryId.in.json",
                "out": "./lib/schemas/getListsIdGrowthHistoryId.out.json"
            }
        },
        "patchListsIdInterestCategoriesIdInterestsId": {
            "main": "./lib/actions/action.js",
            "title": "Update interest in category",
            "description": "Update interests or 'group names' for a specific category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdInterestCategoriesIdInterestsId.in.json",
                "out": "./lib/schemas/patchListsIdInterestCategoriesIdInterestsId.out.json"
            }
        },
        "postListsIdSegments": {
            "main": "./lib/actions/action.js",
            "title": "Add segment",
            "description": "Create a new segment in a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSegments.in.json",
                "out": "./lib/schemas/postListsIdSegments.out.json"
            }
        },
        "getListsIdInterestCategoriesIdInterestsId": {
            "main": "./lib/actions/action.js",
            "title": "Get interest in category",
            "description": "Get interests or 'group names' for a specific category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdInterestCategoriesIdInterestsId.in.json",
                "out": "./lib/schemas/getListsIdInterestCategoriesIdInterestsId.out.json"
            }
        },
        "getListsIdSegmentsId": {
            "main": "./lib/actions/action.js",
            "title": "Get segment info",
            "description": "Get information about a specific segment.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdSegmentsId.in.json",
                "out": "./lib/schemas/getListsIdSegmentsId.out.json"
            }
        },
        "postCampaignsIdActionsSend": {
            "main": "./lib/actions/action.js",
            "title": "Send campaign",
            "description": "Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/send",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsSend.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsSend.out.json"
            }
        },
        "deleteListsIdSegmentsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete segment",
            "description": "Delete a specific segment in a list.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdSegmentsId.in.json",
                "out": "./lib/schemas/deleteListsIdSegmentsId.out.json"
            }
        },
        "deleteListsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete list",
            "description": "Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history--including subscriber activity, unsubscribes, complaints, and bounces. You'll also lose subscribers' email addresses, unless you exported and backed up your list.",
            "callParams": {
                "pathName": "/lists/{list_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsId.in.json",
                "out": "./lib/schemas/deleteListsId.out.json"
            }
        },
        "patchListsIdSegmentsId": {
            "main": "./lib/actions/action.js",
            "title": "Update segment",
            "description": "Update a specific segment in a list.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdSegmentsId.in.json",
                "out": "./lib/schemas/patchListsIdSegmentsId.out.json"
            }
        },
        "postListsIdSegmentsId": {
            "main": "./lib/actions/action.js",
            "title": "Batch add or remove members",
            "description": "Batch add/remove list members to static segment",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSegmentsId.in.json",
                "out": "./lib/schemas/postListsIdSegmentsId.out.json"
            }
        },
        "postListsIdSegmentsIdMembers": {
            "main": "./lib/actions/action.js",
            "title": "Add member to segment",
            "description": "Add a member to a static segment.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}/members",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSegmentsIdMembers.in.json",
                "out": "./lib/schemas/postListsIdSegmentsIdMembers.out.json"
            }
        },
        "getListsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Get member info",
            "description": "Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersId.in.json",
                "out": "./lib/schemas/getListsIdMembersId.out.json"
            }
        },
        "deleteListsIdSegmentsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Remove list member from segment",
            "description": "Remove a member from the specified static segment.",
            "callParams": {
                "pathName": "/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdSegmentsIdMembersId.in.json",
                "out": "./lib/schemas/deleteListsIdSegmentsIdMembersId.out.json"
            }
        },
        "postListsIdMembers": {
            "main": "./lib/actions/action.js",
            "title": "Add member to list",
            "description": "Add a new member to the list.",
            "callParams": {
                "pathName": "/lists/{list_id}/members",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdMembers.in.json",
                "out": "./lib/schemas/postListsIdMembers.out.json"
            }
        },
        "patchListsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Update list member",
            "description": "Update information for a specific list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdMembersId.in.json",
                "out": "./lib/schemas/patchListsIdMembersId.out.json"
            }
        },
        "putListsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Add or update list member",
            "description": "Add or update a list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/putListsIdMembersId.in.json",
                "out": "./lib/schemas/putListsIdMembersId.out.json"
            }
        },
        "postListMemberEvents": {
            "main": "./lib/actions/action.js",
            "title": "Add event",
            "description": "Add an event for a list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/events",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListMemberEvents.in.json",
                "out": "./lib/schemas/postListMemberEvents.out.json"
            }
        },
        "deleteListsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Archive list member",
            "description": "Archive a list member. To permanently delete, use the delete-permanent action.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdMembersId.in.json",
                "out": "./lib/schemas/deleteListsIdMembersId.out.json"
            }
        },
        "postListsIdMembersIdNotes": {
            "main": "./lib/actions/action.js",
            "title": "Add member note",
            "description": "Add a new note for a specific subscriber.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/notes",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdMembersIdNotes.in.json",
                "out": "./lib/schemas/postListsIdMembersIdNotes.out.json"
            }
        },
        "deleteListsIdInterestCategoriesIdInterestsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete interest in category",
            "description": "Delete interests or group names in a specific category.",
            "callParams": {
                "pathName": "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdInterestCategoriesIdInterestsId.in.json",
                "out": "./lib/schemas/deleteListsIdInterestCategoriesIdInterestsId.out.json"
            }
        },
        "getFileManagerFoldersId": {
            "main": "./lib/actions/action.js",
            "title": "Get folder",
            "description": "Get information about a specific folder in the File Manager.",
            "callParams": {
                "pathName": "/file-manager/folders/{folder_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFileManagerFoldersId.in.json",
                "out": "./lib/schemas/getFileManagerFoldersId.out.json"
            }
        },
        "deleteListsIdMembersIdNotesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete note",
            "description": "Delete a specific note for a specific list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdMembersIdNotesId.in.json",
                "out": "./lib/schemas/deleteListsIdMembersIdNotesId.out.json"
            }
        },
        "patchListsIdMembersIdNotesId": {
            "main": "./lib/actions/action.js",
            "title": "Update note",
            "description": "Update a specific note for a specific list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdMembersIdNotesId.in.json",
                "out": "./lib/schemas/patchListsIdMembersIdNotesId.out.json"
            }
        },
        "postListsIdMembersHashActionsDeletePermanent": {
            "main": "./lib/actions/action.js",
            "title": "Delete list member",
            "description": "Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdMembersHashActionsDeletePermanent.in.json",
                "out": "./lib/schemas/postListsIdMembersHashActionsDeletePermanent.out.json"
            }
        },
        "postListMemberTags": {
            "main": "./lib/actions/action.js",
            "title": "Add or remove member tags",
            "description": "Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/tags",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListMemberTags.in.json",
                "out": "./lib/schemas/postListMemberTags.out.json"
            }
        },
        "deleteListsIdMergeFieldsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete merge field",
            "description": "Delete a specific merge field.",
            "callParams": {
                "pathName": "/lists/{list_id}/merge-fields/{merge_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdMergeFieldsId.in.json",
                "out": "./lib/schemas/deleteListsIdMergeFieldsId.out.json"
            }
        },
        "getListsIdMergeFieldsId": {
            "main": "./lib/actions/action.js",
            "title": "Get merge field",
            "description": "Get information about a specific merge field.",
            "callParams": {
                "pathName": "/lists/{list_id}/merge-fields/{merge_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMergeFieldsId.in.json",
                "out": "./lib/schemas/getListsIdMergeFieldsId.out.json"
            }
        },
        "patchListsIdMergeFieldsId": {
            "main": "./lib/actions/action.js",
            "title": "Update merge field",
            "description": "Update a specific merge field.",
            "callParams": {
                "pathName": "/lists/{list_id}/merge-fields/{merge_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdMergeFieldsId.in.json",
                "out": "./lib/schemas/patchListsIdMergeFieldsId.out.json"
            }
        },
        "postListsIdWebhooks": {
            "main": "./lib/actions/action.js",
            "title": "Add webhook",
            "description": "Create a new webhook for a specific list.",
            "callParams": {
                "pathName": "/lists/{list_id}/webhooks",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdWebhooks.in.json",
                "out": "./lib/schemas/postListsIdWebhooks.out.json"
            }
        },
        "getListsIdMembersIdNotesId": {
            "main": "./lib/actions/action.js",
            "title": "Get member note",
            "description": "Get a specific note for a specific list member.",
            "callParams": {
                "pathName": "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdMembersIdNotesId.in.json",
                "out": "./lib/schemas/getListsIdMembersIdNotesId.out.json"
            }
        },
        "postListsIdMergeFields": {
            "main": "./lib/actions/action.js",
            "title": "Add merge field",
            "description": "Add a new merge field for a specific audience.",
            "callParams": {
                "pathName": "/lists/{list_id}/merge-fields",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdMergeFields.in.json",
                "out": "./lib/schemas/postListsIdMergeFields.out.json"
            }
        },
        "deleteListsIdWebhooksId": {
            "main": "./lib/actions/action.js",
            "title": "Delete webhook",
            "description": "Delete a specific webhook in a list.",
            "callParams": {
                "pathName": "/lists/{list_id}/webhooks/{webhook_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteListsIdWebhooksId.in.json",
                "out": "./lib/schemas/deleteListsIdWebhooksId.out.json"
            }
        },
        "patchListsIdWebhooksId": {
            "main": "./lib/actions/action.js",
            "title": "Update webhook",
            "description": "Update the settings for an existing webhook.",
            "callParams": {
                "pathName": "/lists/{list_id}/webhooks/{webhook_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchListsIdWebhooksId.in.json",
                "out": "./lib/schemas/patchListsIdWebhooksId.out.json"
            }
        },
        "postListsIdSignupForms": {
            "main": "./lib/actions/action.js",
            "title": "Customize signup form",
            "description": "Customize a list's default signup form.",
            "callParams": {
                "pathName": "/lists/{list_id}/signup-forms",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSignupForms.in.json",
                "out": "./lib/schemas/postListsIdSignupForms.out.json"
            }
        },
        "getListsIdSurveysId": {
            "main": "./lib/actions/action.js",
            "title": "Get survey",
            "description": "Get details about a specific survey.",
            "callParams": {
                "pathName": "/lists/{list_id}/surveys/{survey_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdSurveysId.in.json",
                "out": "./lib/schemas/getListsIdSurveysId.out.json"
            }
        },
        "postListsIdSurveysIdActionsPublish": {
            "main": "./lib/actions/action.js",
            "title": "Publish a Survey",
            "description": "Publish a survey that is in draft, unpublished, or has been previously published and edited.",
            "callParams": {
                "pathName": "/lists/{list_id}/surveys/{survey_id}/actions/publish",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSurveysIdActionsPublish.in.json",
                "out": "./lib/schemas/postListsIdSurveysIdActionsPublish.out.json"
            }
        },
        "getLandingPageId": {
            "main": "./lib/actions/action.js",
            "title": "Get landing page info",
            "description": "Get information about a specific page.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getLandingPageId.in.json",
                "out": "./lib/schemas/getLandingPageId.out.json"
            }
        },
        "postListsIdSurveysIdActionsUnpublish": {
            "main": "./lib/actions/action.js",
            "title": "Unpublish a Survey",
            "description": "Unpublish a survey that has been published.",
            "callParams": {
                "pathName": "/lists/{list_id}/surveys/{survey_id}/actions/unpublish",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postListsIdSurveysIdActionsUnpublish.in.json",
                "out": "./lib/schemas/postListsIdSurveysIdActionsUnpublish.out.json"
            }
        },
        "postCampaignsIdActionsCreateResend": {
            "main": "./lib/actions/action.js",
            "title": "Resend campaign",
            "description": "Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/create-resend",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsCreateResend.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsCreateResend.out.json"
            }
        },
        "postAllLandingPages": {
            "main": "./lib/actions/action.js",
            "title": "Add landing page",
            "description": "Create a new Mailchimp landing page.",
            "callParams": {
                "pathName": "/landing-pages",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postAllLandingPages.in.json",
                "out": "./lib/schemas/postAllLandingPages.out.json"
            }
        },
        "postLandingPageIdActionsUnpublish": {
            "main": "./lib/actions/action.js",
            "title": "Unpublish landing page",
            "description": "Unpublish a landing page that is in draft or has been published.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}/actions/unpublish",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postLandingPageIdActionsUnpublish.in.json",
                "out": "./lib/schemas/postLandingPageIdActionsUnpublish.out.json"
            }
        },
        "postLandingPageIdActionsPublish": {
            "main": "./lib/actions/action.js",
            "title": "Publish landing page",
            "description": "Publish a landing page that is in draft, unpublished, or has been previously published and edited.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}/actions/publish",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postLandingPageIdActionsPublish.in.json",
                "out": "./lib/schemas/postLandingPageIdActionsPublish.out.json"
            }
        },
        "patchLandingPageId": {
            "main": "./lib/actions/action.js",
            "title": "Update landing page",
            "description": "Update a landing page.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchLandingPageId.in.json",
                "out": "./lib/schemas/patchLandingPageId.out.json"
            }
        },
        "deleteLandingPageId": {
            "main": "./lib/actions/action.js",
            "title": "Delete landing page",
            "description": "Delete a landing page.",
            "callParams": {
                "pathName": "/landing-pages/{page_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteLandingPageId.in.json",
                "out": "./lib/schemas/deleteLandingPageId.out.json"
            }
        },
        "getReportsId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign report",
            "description": "Get report details for a specific sent campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsId.in.json",
                "out": "./lib/schemas/getReportsId.out.json"
            }
        },
        "postCampaignsIdActionsCancelSend": {
            "main": "./lib/actions/action.js",
            "title": "Cancel campaign",
            "description": "Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}/actions/cancel-send",
                "method": "post"
            },
            "metadata": {
                "in": "./lib/schemas/postCampaignsIdActionsCancelSend.in.json",
                "out": "./lib/schemas/postCampaignsIdActionsCancelSend.out.json"
            }
        },
        "getReportsIdClickDetailsId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign link details",
            "description": "Get click details for a specific link in a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/click-details/{link_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdClickDetailsId.in.json",
                "out": "./lib/schemas/getReportsIdClickDetailsId.out.json"
            }
        },
        "getReportsIdClickDetailsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Get clicked link subscriber",
            "description": "Get information about a specific subscriber who clicked a link in a specific campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdClickDetailsIdMembersId.in.json",
                "out": "./lib/schemas/getReportsIdClickDetailsIdMembersId.out.json"
            }
        },
        "getReportsIdAbuseReportsIdId": {
            "main": "./lib/actions/action.js",
            "title": "Get abuse report",
            "description": "Get information about a specific abuse report for a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/abuse-reports/{report_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdAbuseReportsIdId.in.json",
                "out": "./lib/schemas/getReportsIdAbuseReportsIdId.out.json"
            }
        },
        "getReportsIdEmailActivityId": {
            "main": "./lib/actions/action.js",
            "title": "Get subscriber email activity",
            "description": "Get a specific list member's activity in a campaign including opens, clicks, and bounces.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/email-activity/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdEmailActivityId.in.json",
                "out": "./lib/schemas/getReportsIdEmailActivityId.out.json"
            }
        },
        "getReportsIdSentToId": {
            "main": "./lib/actions/action.js",
            "title": "Get campaign recipient info",
            "description": "Get information about a specific campaign recipient.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/sent-to/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdSentToId.in.json",
                "out": "./lib/schemas/getReportsIdSentToId.out.json"
            }
        },
        "patchTemplatesId": {
            "main": "./lib/actions/action.js",
            "title": "Update template",
            "description": "Update the name, HTML, or `folder_id` of an existing template.",
            "callParams": {
                "pathName": "/templates/{template_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchTemplatesId.in.json",
                "out": "./lib/schemas/patchTemplatesId.out.json"
            }
        },
        "getAccountExportId": {
            "main": "./lib/actions/action.js",
            "title": "Get account export info",
            "description": "Get information about a specific account export.",
            "callParams": {
                "pathName": "/account-exports/{export_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getAccountExportId.in.json",
                "out": "./lib/schemas/getAccountExportId.out.json"
            }
        },
        "getReportsIdUnsubscribedId": {
            "main": "./lib/actions/action.js",
            "title": "Get unsubscribed member",
            "description": "Get information about a specific list member who unsubscribed from a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/unsubscribed/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdUnsubscribedId.in.json",
                "out": "./lib/schemas/getReportsIdUnsubscribedId.out.json"
            }
        },
        "deleteTemplatesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete template",
            "description": "Delete a specific template.",
            "callParams": {
                "pathName": "/templates/{template_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteTemplatesId.in.json",
                "out": "./lib/schemas/deleteTemplatesId.out.json"
            }
        },
        "getTemplatesId": {
            "main": "./lib/actions/action.js",
            "title": "Get template info",
            "description": "Get information about a specific template.",
            "callParams": {
                "pathName": "/templates/{template_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getTemplatesId.in.json",
                "out": "./lib/schemas/getTemplatesId.out.json"
            }
        },
        "getListsIdWebhooksId": {
            "main": "./lib/actions/action.js",
            "title": "Get webhook info",
            "description": "Get information about a specific webhook.",
            "callParams": {
                "pathName": "/lists/{list_id}/webhooks/{webhook_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getListsIdWebhooksId.in.json",
                "out": "./lib/schemas/getListsIdWebhooksId.out.json"
            }
        },
        "getReportsIdOpenDetailsIdMembersId": {
            "main": "./lib/actions/action.js",
            "title": "Get opened campaign subscriber",
            "description": "Get information about a specific subscriber who opened a campaign.",
            "callParams": {
                "pathName": "/reports/{campaign_id}/open-details/{subscriber_hash}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportsIdOpenDetailsIdMembersId.in.json",
                "out": "./lib/schemas/getReportsIdOpenDetailsIdMembersId.out.json"
            }
        },
        "deleteEcommerceStoresId": {
            "main": "./lib/actions/action.js",
            "title": "Delete store",
            "description": "Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresId.out.json"
            }
        },
        "getEcommerceStoresIdCartsId": {
            "main": "./lib/actions/action.js",
            "title": "Get cart info",
            "description": "Get information about a specific cart.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCartsId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCartsId.out.json"
            }
        },
        "deleteEcommerceStoresIdCartsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete cart",
            "description": "Delete a cart.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdCartsId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdCartsId.out.json"
            }
        },
        "postEcommerceStoresIdCarts": {
            "main": "./lib/actions/action.js",
            "title": "Add cart",
            "description": "Add a new cart to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdCarts.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdCarts.out.json"
            }
        },
        "patchEcommerceStoresIdCartsId": {
            "main": "./lib/actions/action.js",
            "title": "Update cart",
            "description": "Update a specific cart.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdCartsId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdCartsId.out.json"
            }
        },
        "patchEcommerceStoresIdCartsIdLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Update cart line item",
            "description": "Update a specific cart line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdCartsIdLinesId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdCartsIdLinesId.out.json"
            }
        },
        "getEcommerceStoresId": {
            "main": "./lib/actions/action.js",
            "title": "Get store info",
            "description": "Get information about a specific store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresId.in.json",
                "out": "./lib/schemas/getEcommerceStoresId.out.json"
            }
        },
        "deleteEcommerceStoresIdCartsLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete cart line item",
            "description": "Delete a specific cart line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdCartsLinesId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdCartsLinesId.out.json"
            }
        },
        "getEcommerceStoresIdCustomersId": {
            "main": "./lib/actions/action.js",
            "title": "Get customer info",
            "description": "Get information about a specific customer.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers/{customer_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCustomersId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCustomersId.out.json"
            }
        },
        "postEcommerceStoresIdCartsIdLines": {
            "main": "./lib/actions/action.js",
            "title": "Add cart line item",
            "description": "Add a new line item to an existing cart.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}/lines",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdCartsIdLines.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdCartsIdLines.out.json"
            }
        },
        "getEcommerceStoresIdCartsIdLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Get cart line item",
            "description": "Get information about a specific cart line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdCartsIdLinesId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdCartsIdLinesId.out.json"
            }
        },
        "deleteEcommerceStoresIdCustomersId": {
            "main": "./lib/actions/action.js",
            "title": "Delete customer",
            "description": "Delete a customer from a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers/{customer_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdCustomersId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdCustomersId.out.json"
            }
        },
        "postEcommerceStoresIdCustomers": {
            "main": "./lib/actions/action.js",
            "title": "Add customer",
            "description": "Add a new customer to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdCustomers.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdCustomers.out.json"
            }
        },
        "putEcommerceStoresIdCustomersId": {
            "main": "./lib/actions/action.js",
            "title": "Add or update customer",
            "description": "Add or update a customer.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers/{customer_id}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/putEcommerceStoresIdCustomersId.in.json",
                "out": "./lib/schemas/putEcommerceStoresIdCustomersId.out.json"
            }
        },
        "postEcommerceStoresIdPromorules": {
            "main": "./lib/actions/action.js",
            "title": "Add promo rule",
            "description": "Add a new promo rule to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdPromorules.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdPromorules.out.json"
            }
        },
        "patchEcommerceStoresIdPromorulesId": {
            "main": "./lib/actions/action.js",
            "title": "Update promo rule",
            "description": "Update a promo rule.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdPromorulesId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdPromorulesId.out.json"
            }
        },
        "deleteEcommerceStoresIdPromorulesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete promo rule",
            "description": "Delete a promo rule from a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdPromorulesId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdPromorulesId.out.json"
            }
        },
        "postEcommerceStoresIdPromocodes": {
            "main": "./lib/actions/action.js",
            "title": "Add promo code",
            "description": "Add a new promo code to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdPromocodes.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdPromocodes.out.json"
            }
        },
        "deleteEcommerceStoresIdPromocodesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete promo code",
            "description": "Delete a promo code from a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdPromocodesId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdPromocodesId.out.json"
            }
        },
        "getEcommerceStoresIdPromorulesId": {
            "main": "./lib/actions/action.js",
            "title": "Get promo rule",
            "description": "Get information about a specific promo rule.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdPromorulesId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdPromorulesId.out.json"
            }
        },
        "patchEcommerceStoresIdPromocodesId": {
            "main": "./lib/actions/action.js",
            "title": "Update promo code",
            "description": "Update a promo code.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdPromocodesId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdPromocodesId.out.json"
            }
        },
        "getEcommerceStoresIdPromocodesId": {
            "main": "./lib/actions/action.js",
            "title": "Get promo code",
            "description": "Get information about a specific promo code.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdPromocodesId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdPromocodesId.out.json"
            }
        },
        "postEcommerceStoresIdOrders": {
            "main": "./lib/actions/action.js",
            "title": "Add order",
            "description": "Add a new order to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdOrders.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdOrders.out.json"
            }
        },
        "patchEcommerceStoresIdCustomersId": {
            "main": "./lib/actions/action.js",
            "title": "Update customer",
            "description": "Update a customer.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/customers/{customer_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdCustomersId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdCustomersId.out.json"
            }
        },
        "patchEcommerceStoresIdOrdersId": {
            "main": "./lib/actions/action.js",
            "title": "Update order",
            "description": "Update a specific order.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdOrdersId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdOrdersId.out.json"
            }
        },
        "postListsId": {
            "main": "./lib/actions/action.js",
            "title": "Batch subscribe or unsubscribe",
            "description": "Batch subscribe or unsubscribe list members.",
            "callParams": {
                "pathName": "/lists/{list_id}",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postListsId.in.json",
                "out": "./lib/schemas/postListsId.out.json"
            }
        },
        "getEcommerceStoresIdOrdersId": {
            "main": "./lib/actions/action.js",
            "title": "Get order info",
            "description": "Get information about a specific order.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdOrdersId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdOrdersId.out.json"
            }
        },
        "deleteEcommerceStoresIdOrdersIdLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete order line item",
            "description": "Delete a specific order line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdOrdersIdLinesId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdOrdersIdLinesId.out.json"
            }
        },
        "patchEcommerceStoresIdOrdersIdLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Update order line item",
            "description": "Update a specific order line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdOrdersIdLinesId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdOrdersIdLinesId.out.json"
            }
        },
        "deleteEcommerceStoresIdProductsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete product",
            "description": "Delete a product.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdProductsId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdProductsId.out.json"
            }
        },
        "postEcommerceStoresIdOrdersIdLines": {
            "main": "./lib/actions/action.js",
            "title": "Add order line item",
            "description": "Add a new line item to an existing order.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}/lines",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdOrdersIdLines.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdOrdersIdLines.out.json"
            }
        },
        "patchEcommerceStoresIdProductsId": {
            "main": "./lib/actions/action.js",
            "title": "Update product",
            "description": "Update a specific product.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdProductsId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdProductsId.out.json"
            }
        },
        "getEcommerceStoresIdProductsId": {
            "main": "./lib/actions/action.js",
            "title": "Get product info",
            "description": "Get information about a specific product.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProductsId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProductsId.out.json"
            }
        },
        "postEcommerceStoresIdProductsIdVariants": {
            "main": "./lib/actions/action.js",
            "title": "Add product variant",
            "description": "Add a new variant to the product.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdProductsIdVariants.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdProductsIdVariants.out.json"
            }
        },
        "patchEcommerceStoresIdProductsIdVariantsId": {
            "main": "./lib/actions/action.js",
            "title": "Update product variant",
            "description": "Update a product variant.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdProductsIdVariantsId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdProductsIdVariantsId.out.json"
            }
        },
        "postEcommerceStoresIdProducts": {
            "main": "./lib/actions/action.js",
            "title": "Add product",
            "description": "Add a new product to a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdProducts.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdProducts.out.json"
            }
        },
        "getEcommerceStoresIdProductsIdVariantsId": {
            "main": "./lib/actions/action.js",
            "title": "Get product variant info",
            "description": "Get information about a specific product variant.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProductsIdVariantsId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProductsIdVariantsId.out.json"
            }
        },
        "putEcommerceStoresIdProductsIdVariantsId": {
            "main": "./lib/actions/action.js",
            "title": "Add or update product variant",
            "description": "Add or update a product variant.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}",
                "method": "put",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/putEcommerceStoresIdProductsIdVariantsId.in.json",
                "out": "./lib/schemas/putEcommerceStoresIdProductsIdVariantsId.out.json"
            }
        },
        "deleteEcommerceStoresIdProductsIdVariantsId": {
            "main": "./lib/actions/action.js",
            "title": "Delete product variant",
            "description": "Delete a product variant.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdProductsIdVariantsId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdProductsIdVariantsId.out.json"
            }
        },
        "postEcommerceStoresIdProductsIdImages": {
            "main": "./lib/actions/action.js",
            "title": "Add product image",
            "description": "Add a new image to the product.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/images",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStoresIdProductsIdImages.in.json",
                "out": "./lib/schemas/postEcommerceStoresIdProductsIdImages.out.json"
            }
        },
        "patchEcommerceStoresId": {
            "main": "./lib/actions/action.js",
            "title": "Update store",
            "description": "Update a store.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresId.out.json"
            }
        },
        "postEcommerceStores": {
            "main": "./lib/actions/action.js",
            "title": "Add store",
            "description": "Add a new store to your Mailchimp account.",
            "callParams": {
                "pathName": "/ecommerce/stores",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postEcommerceStores.in.json",
                "out": "./lib/schemas/postEcommerceStores.out.json"
            }
        },
        "deleteEcommerceStoresIdProductsIdImagesId": {
            "main": "./lib/actions/action.js",
            "title": "Delete product image",
            "description": "Delete a product image.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdProductsIdImagesId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdProductsIdImagesId.out.json"
            }
        },
        "getReportingSurveysId": {
            "main": "./lib/actions/action.js",
            "title": "Get survey report",
            "description": "Get report for a survey.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysId.in.json",
                "out": "./lib/schemas/getReportingSurveysId.out.json"
            }
        },
        "getReportingLandingPagesId": {
            "main": "./lib/actions/action.js",
            "title": "Get landing page report",
            "description": "Get report of a landing page.",
            "callParams": {
                "pathName": "/reporting/landing-pages/{outreach_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingLandingPagesId.in.json",
                "out": "./lib/schemas/getReportingLandingPagesId.out.json"
            }
        },
        "deleteVerifiedDomain": {
            "main": "./lib/actions/action.js",
            "title": "Delete domain",
            "description": "Delete a verified domain from the account.",
            "callParams": {
                "pathName": "/verified-domains/{domain_name}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteVerifiedDomain.in.json",
                "out": "./lib/schemas/deleteVerifiedDomain.out.json"
            }
        },
        "getReportingSurveysIdQuestionsId": {
            "main": "./lib/actions/action.js",
            "title": "Get survey question report",
            "description": "Get report for a survey question.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}/questions/{question_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysIdQuestionsId.in.json",
                "out": "./lib/schemas/getReportingSurveysIdQuestionsId.out.json"
            }
        },
        "getVerifiedDomain": {
            "main": "./lib/actions/action.js",
            "title": "Get domain info",
            "description": "Get the details for a single domain on the account.",
            "callParams": {
                "pathName": "/verified-domains/{domain_name}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getVerifiedDomain.in.json",
                "out": "./lib/schemas/getVerifiedDomain.out.json"
            }
        },
        "verifyDomain": {
            "main": "./lib/actions/action.js",
            "title": "Verify domain",
            "description": "Verify a domain for sending.",
            "callParams": {
                "pathName": "/verified-domains/{domain_name}/actions/verify",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/verifyDomain.in.json",
                "out": "./lib/schemas/verifyDomain.out.json"
            }
        },
        "getReportingSurveysIdResponsesId": {
            "main": "./lib/actions/action.js",
            "title": "Get survey response",
            "description": "Get a single survey response.",
            "callParams": {
                "pathName": "/reporting/surveys/{outreach_id}/responses/{response_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingSurveysIdResponsesId.in.json",
                "out": "./lib/schemas/getReportingSurveysIdResponsesId.out.json"
            }
        },
        "createVerifiedDomain": {
            "main": "./lib/actions/action.js",
            "title": "Add domain to account",
            "description": "Add a domain to the account.",
            "callParams": {
                "pathName": "/verified-domains",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/createVerifiedDomain.in.json",
                "out": "./lib/schemas/createVerifiedDomain.out.json"
            }
        },
        "postTemplates": {
            "main": "./lib/actions/action.js",
            "title": "Add template",
            "description": "Create a new template for the account. Only Classic templates are supported.",
            "callParams": {
                "pathName": "/templates",
                "method": "post",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/postTemplates.in.json",
                "out": "./lib/schemas/postTemplates.out.json"
            }
        },
        "getEcommerceStoresIdOrdersIdLinesId": {
            "main": "./lib/actions/action.js",
            "title": "Get order line item",
            "description": "Get information about a specific order line item.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdOrdersIdLinesId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdOrdersIdLinesId.out.json"
            }
        },
        "patchEcommerceStoresIdProductsIdImagesId": {
            "main": "./lib/actions/action.js",
            "title": "Update product image",
            "description": "Update a product image.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchEcommerceStoresIdProductsIdImagesId.in.json",
                "out": "./lib/schemas/patchEcommerceStoresIdProductsIdImagesId.out.json"
            }
        },
        "deleteEcommerceStoresIdOrdersId": {
            "main": "./lib/actions/action.js",
            "title": "Delete order",
            "description": "Delete an order.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/orders/{order_id}",
                "method": "delete"
            },
            "metadata": {
                "in": "./lib/schemas/deleteEcommerceStoresIdOrdersId.in.json",
                "out": "./lib/schemas/deleteEcommerceStoresIdOrdersId.out.json"
            }
        },
        "getEcommerceStoresIdProductsIdImagesId": {
            "main": "./lib/actions/action.js",
            "title": "Get product image info",
            "description": "Get information about a specific product image.",
            "callParams": {
                "pathName": "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getEcommerceStoresIdProductsIdImagesId.in.json",
                "out": "./lib/schemas/getEcommerceStoresIdProductsIdImagesId.out.json"
            }
        },
        "getFacebookAdsId": {
            "main": "./lib/actions/action.js",
            "title": "Get facebook ad info",
            "description": "Get details of a Facebook ad.",
            "callParams": {
                "pathName": "/facebook-ads/{outreach_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getFacebookAdsId.in.json",
                "out": "./lib/schemas/getFacebookAdsId.out.json"
            }
        },
        "getReportingFacebookAdsId": {
            "main": "./lib/actions/action.js",
            "title": "Get facebook ad report",
            "description": "Get report of a Facebook ad.",
            "callParams": {
                "pathName": "/reporting/facebook-ads/{outreach_id}",
                "method": "get"
            },
            "metadata": {
                "in": "./lib/schemas/getReportingFacebookAdsId.in.json",
                "out": "./lib/schemas/getReportingFacebookAdsId.out.json"
            }
        },
        "patchCampaignsId": {
            "main": "./lib/actions/action.js",
            "title": "Update campaign settings",
            "description": "Update some or all of the settings for a specific campaign.",
            "callParams": {
                "pathName": "/campaigns/{campaign_id}",
                "method": "patch",
                "requestContentType": "application/json"
            },
            "metadata": {
                "in": "./lib/schemas/patchCampaignsId.in.json",
                "out": "./lib/schemas/patchCampaignsId.out.json"
            }
        }
    }
}